{"version":3,"sources":["components/Foodbox.js","components/Food.js","components/Header.js","components/AddNew.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Foodbox","className","key","this","src","props","food","image","alt","name","calories","type","value","Component","Food","populateAll","allFoods","map","eachFood","i","Header","title","AddNew","state","quantity","open","setForm","e","setState","target","handleFormSubmit","preventDefault","addTheMeal","toggleOpen","showForm","onSubmit","onChange","onClick","Search","query","handleInputChange","search","placeholder","ref","input","filter","App","foods","pushFood","console","log","foodsCopy","unshift","compare","searchResults","toUpperCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42c92e24.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Foodbox extends Component {\n  render() {\n    return (\n      <div className=\"box\" >\n        <article className=\"media\" key={this.key}>\n          <div className=\"media-left\">\n            <figure className=\"image is-64x64\">\n              <img src={this.props.food.image} alt=\"\"/>\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <div className=\"content\">\n              <p>\n                <strong>{this.props.food.name}</strong> <br />\n                <small>{this.props.food.calories} cal</small>\n              </p>\n            </div>\n          </div>\n          <div className=\"media-right\">\n            <div className=\"field has-addons\">\n              <div className=\"control\">\n                <input className=\"input\" type=\"number\" value=\"1\" />\n              </div>\n              <div className=\"control\">\n                <button className=\"button is-info\">+</button>\n              </div>\n            </div>\n          </div>\n        </article>\n      </div>\n    );\n  }\n}\n\nexport default Foodbox;\n","import React, { Component } from \"react\";\nimport Foodbox from \"./Foodbox\";\n// import foods from \"../foods.json\"\n\nclass Food extends Component {\n\n\n  populateAll = () => {\n    return this.props.allFoods.map((eachFood, i) => (\n      <Foodbox key={i} food={eachFood}></Foodbox>\n    ));\n  };\n\n  render() {\n    return <div className=\"column\">{this.populateAll()}</div>;\n  }\n}\n\nexport default Food;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return (\n            <h1 className=\"title\">{this.props.title}</h1>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from \"react\";\n\nclass AddNew extends Component {\n  state = {\n    name: \"\",\n    calories: 0,\n    image: \"\",\n    quantity: 0,\n    open: false\n  };\n\n  setForm = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    this.props.addTheMeal(this.state);\n    this.setState({\n      name: \"\",\n      calories: 0,\n      image: \"\",\n      quantity: 0,\n      open: false\n    });\n  };\n\n  toggleOpen = () => {\n    this.setState({\n      open: !this.state.open\n    });\n  };\n\n  showForm = () => {\n    if (this.state.open) {\n      return (\n        <form onSubmit={this.handleFormSubmit} className=\"column is-half\">\n          <div className=\"field\">\n            <label className=\"label\">Name:</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"name\"\n                onChange={this.setForm}\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Calories:</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"number\"\n                name=\"calories\"\n                onChange={this.setForm}\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Image URL:</label>\n            <div className=\"control\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"image\"\n                onChange={this.setForm}\n              />\n            </div>\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-primary\">Submit</button>\n          </div>\n        </form>\n      );\n    } else {\n      return (\n        <button className=\"button is-primary\" onClick={this.toggleOpen}>\n          Add New Meal\n        </button>\n      );\n    }\n  };\n\n  render() {\n    return <div>{this.showForm()}</div>;\n  }\n}\n\nexport default AddNew;\n","import React, { Component } from \"react\";\n\nclass Search extends Component {\n  state = {\n    query: \"\"\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      query: this.search.value\n    });\n  };\n\n  render() {\n    return (\n      <form>\n        <div className=\"field has-addons\">\n          <div className=\"control\">\n            <input\n              className=\"input\"\n              type=\"text\"\n              placeholder=\"Search for...\"\n              ref={input => (this.search = input)}\n              onChange={this.props.filter()}\n            />\n          </div>\n          <div className=\"control\">\n            <button className=\"button is-info\">Search</button>\n          </div>\n        </div>\n        <p>{this.state.query}</p>\n      </form>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bulma/css/bulma.css\";\nimport foods from \"./foods.json\";\n// import Foodbox from \"./components/Foodbox\";\nimport Food from \"./components/Food\";\nimport Header from \"./components/Header\";\nimport AddNew from \"./components/AddNew\";\nimport Search from \"./components/Search\";\n// import { thisTypeAnnotation } from \"@babel/types\";\n\nclass App extends Component {\n  state = {\n    allFoods: foods\n  };\n\n  pushFood = food => {\n    console.log(this.state.allFoods, food);\n    let foodsCopy = [...this.state.allFoods];\n    foodsCopy.unshift(food);\n    this.setState({\n      allFoods: foodsCopy\n    });\n  };\n\n  compare = e => {\n    // let foodsCopy = [...this.state.allFoods];\n    let searchResults = foods.filter(food =>\n      food.name.toUpperCase().includes(e.target.value.toUpperCase())\n    );\n    this.setState({\n      allFoods: searchResults\n    });\n    console.log(this.state.allFoods)\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header title=\"IronNutrition\" />\n        <AddNew addTheMeal={() => this.pushFood} />\n        <Search filter={() => this.compare} />\n        <Food allFoods={this.state.allFoods}></Food>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\n// import foods from './foods.json'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}